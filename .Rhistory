library(igraph)
library(tidyverse)
network_bb <- read_graph("BB_cum.graphml", format = "graphml")
make_clusters(network_bb)
network_bb <- read_graph("BB_cum.graphml", format = "graphml")
main_bb <- decompose(network_bb, min.vertices = 5)
communities <- cluster_infomap(network_bb)
print(communities)
?decompose
?decompose
dc <- decompose(network_bb, mode = "weak")
cluster_walktrap(dc)
dc <- decompose(network_bb, mode = "weak", max.comps = 1, min.vertices = 5)
?cluster_walktrap
cluster_walktrap(dc, weights = NULL)
dendPlot(network_bb)
ng <- cluster_edge_betweenness(network_bb, weights = NULL, directed = FALSE)
dendPlot(ng)
communities <- cluster_infomap(network_bb)
print(communities)
communities <- cluster_infomap(network_bb)
print(communities)
communities
ng <- cluster_edge_betweenness(network_bb, weights = NULL, directed = FALSE)
plot(ng, net)
plot(ng, network_bb)
plot(ng, network_bb, labels())
plot(ng, network_bb, labels(NA))
plot(ng, network_bb, vertex.labels = ())
plot(ng, network_bb, vertex.labels = (NA))
plot(network_bb,
layout = layout_with_mds(),
vertex.size = 3)
plot(network_bb,
layout = layout_with_mds(network_bb),
vertex.size = 3)
plot(network_bb,
vertex.label = NA)
plot(network_bb,
layout = layout.auto(network_bb)
vertex.label = NA)
plot(network_bb,
layout = layout.auto(network_bb),
vertex.label = NA)
plot(network_bb,
layout = layout_with_fr(network_bb),
vertex.label = NA)
plot(ng, network_bb, vertex.labels = NA)
plot(ng, network_bb, vertex.label = NA)
plot(ng, network_bb, vertex.label = NA, vertex.size = 3)
cluster_fast_greedy(network_bb)
fg <- cluster_fast_greedy(network_bb)
plot(fg, network_bb, vertex.label = NA, vertex.size = 3)
info <- cluster_infomap(network_bb)
plot(info, network_bb, vertex.label = NA, vertex.size = 3)
modularity(info)
plot(network_bb,
layout = layout_as_tree(network_bb, root = "Walter White"),
vertex.size = 3,
vertex.label = NA,
main = "Breaking Bad Tree Layout")
#get index nr of Walter White to make him the root of the tree plot
which(V(network_bb)$name == "Walter White")
plot(network_bb,
layout = layout_as_tree(network_bb, root = 0),
vertex.size = 3,
vertex.label = NA,
main = "Breaking Bad Tree Layout")
#get index nr of Walter White to make him the root of the tree plot
node_name <- "Walter White"
which(V(network_bb)$name == node_name)
plot(network_bb,
layout = layout_as_tree(network_bb, root = 0),
vertex.size = 3,
vertex.label = NA,
main = "Breaking Bad Tree Layout")
V(network_bb)$name
network_bb <- read_graph("BB_cum.graphml", format = "graphml")
V(network_bb)$name
V(network_bb)$label
#get index nr of Walter White to make him the root of the tree plot
node_label <- "Walter White"
which(V(network_bb)$name == node_label)
plot(network_bb,
layout = layout_as_tree(network_bb, root = 0),
vertex.size = 3,
vertex.label = NA,
main = "Breaking Bad Tree Layout")
plot(network_bb,
layout = layout_as_tree(network_bb, root = 7),
vertex.size = 3,
vertex.label = NA,
main = "Breaking Bad Tree Layout")
vertex_attr(network_bb)
vcount(network_bb)
ecount(network_bb)
vcount(network_bb)
ecount(network_bb)
get_diameter(network_bb, directed = FALSE, weights = NA)
#the data only contains labels which identify the persons, but the degree function needs the attribute "name" to look up specific people
vertex_attr(network_bb, "name") <- V(network_bb)$label
#there we go
degree(network_bb, v = c("Walter White", "Skyler White", "Jesse Pinkman", "Saul Goodman", "Ted Beneke", "Gustavo Fring", "Hank Schrader", "Marie Schrader", "Mike Ehrmantraut", "Walter White Jr."))
#in order to show the names of the characters representing a node, the attribute name has to be assigned from label
vertex_attr(network_bb, "name") <- V(network_bb)$label
get_diameter(network_bb, directed = FALSE, weights = NA)
?cluster_edge_betweenness
ng <- cluster_edge_betweenness(network_bb, weights = NULL, directed = FALSE, modularity = TRUE)
